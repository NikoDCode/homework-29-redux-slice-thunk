import { Action, Middleware } from '@reduxjs/toolkit'

interface LoggerOptions {
  collapsed?: boolean
  timestamp?: boolean
}

export const createLogger = (options: LoggerOptions = {}): Middleware => {
  const { collapsed = false, timestamp = true } = options

  return (storeApi) => (next) => (action) => {
    const prevState = storeApi.getState().counter.count
    const startTime = Date.now()
    const result = next(action)
    const nextState = storeApi.getState().counter.count
    const took = Date.now() - startTime

    const message = `
    ${timestamp ? `‚è± Action –≤–∏–∫–æ–Ω–∞–Ω–æ –∑–∞ ${took}ms | ` : ''}
    üìä –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω: ${prevState}
    üìù –î—ñ—Å–ø–∞—Ç—á –µ–∫—à–µ–Ω—É: ${(action as Action).type}
    üéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞–Ω: ${nextState}
    `

    if (collapsed) {
      console.groupCollapsed(`Redux Logger: ${(action as Action).type}`)
      console.log(message)
      console.groupEnd()
    } else {
      console.log(message)
    }

    return result
  }
}

export const logger = createLogger()
